security:
  encoders:
    App\Entity\User:
      algorithm: bcrypt
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    users_in_memory: { memory: null }
    in_database:
      entity:
        class: App\Entity\User
        property: username
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      anonymous: true
      #provider: users_in_memory
      provider: in_database
      form_login:
        login_path: user_login
        check_path: user_login
      logout:
        path: user_logout
        target: user_login

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication
      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # - { path: ^/profile, roles: ROLE_USER }
    - { path: ^/user, roles: ROLE_ADMIN }
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/service, roles: ROLE_ADMIN }
    - { path: ^/category, roles: ROLE_ADMIN }
    - { path: ^/yesorno, roles: ROLE_ADMIN }
    - { path: ^/intervention, roles: ROLE_USER }
    - { path: ^/pointage, roles: ROLE_USER }
    - { path: ^/identifiant, roles: ROLE_USER }
    - { path: ^/manuel, roles: ROLE_USER }
    - { path: ^/reunion, roles: ROLE_USER }

  role_hierarchy:
    # ROLE_ADMIN: [ROLE_ADMIN_MDS, ROLE_ADMIN_URBA, ROLE_RESA, ROLE_ADMIN_ARCHIVE, ROLE_DST, ROLE_RH]
    ROLE_ADMIN: [ROLE_USER]
